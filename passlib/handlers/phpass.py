"""passlib.handlers.phpass - PHPass Portable Crypt

phppass located - http://www.openwall.com/phpass/
algorithm described - http://www.openwall.com/articles/PHP-Users-Passwords

phpass context - blowfish, ext_des_crypt, phpass
"""
#=========================================================
#imports
#=========================================================
#core
from hashlib import md5, sha512
import re
import logging; log = logging.getLogger(__name__)
from warnings import warn
#site
#libs
from passlib.utils import h64
from passlib.utils.handlers import ExtendedHandler
#pkg
#local
__all__ = [
    "phpass",
]

#=========================================================
#phpass
#=========================================================
class phpass(ExtendedHandler):
    """This class implements the PHPass Portable Hash, and follows the :ref:`password-hash-api`.

    It supports a fixed-length salt, and a variable number of rounds.

    The :meth:`encrypt()` and :meth:`genconfig` methods accept the following optional keywords:

    :param salt:
        Optional salt string.
        If not specified, one will be autogenerated (this is recommended).
        If specified, it must be 8 characters, drawn from the regexp range ``[./0-9A-Za-z]``.

    :param rounds:
        Optional number of rounds to use.
        Defaults to 9, must be between 7 and 30, inclusive.
        This value is logarithmic, the actual number of iterations used will be :samp:`2**{rounds}`.

    :param ident:
        phpBB3 uses ``H`` instead of ``P`` for it's identifier,
        this may be set to ``H`` in order to generate phpBB3 compatible hashes.
        it defaults to ``P``.

    """

    #=========================================================
    #class attrs
    #=========================================================
    name = "phpass"
    setting_kwds = ("salt", "rounds", "ident")

    min_salt_chars = max_salt_chars = 8

    default_rounds = 9
    min_rounds = 7
    max_rounds = 30
    rounds_cost = "log2"

    _strict_rounds_bounds = True
    _extra_init_settings = ("ident",)

    #=========================================================
    #instance attrs
    #=========================================================
    ident = None

    #=========================================================
    #init
    #=========================================================
    @classmethod
    def norm_ident(cls, ident, strict=False):
        if not ident:
            if strict:
                raise ValueError, "no ident specified"
            ident = "P"
        if ident not in ("P", "H"):
            raise ValueError, "invalid ident: %r" % (ident,)
        return ident

    #=========================================================
    #formatting
    #=========================================================

    @classmethod
    def identify(cls, hash):
        return bool(hash) and (hash.startswith("$P$") or hash.startswith("$H$"))

    #$P$9IQRaTwmfeRo7ud9Fh4E2PdI0S3r.L0
    # $P$                       <- ident
    # 9                         <- rounds
    # IQRaTwmf                  <- salt
    # eRo7ud9Fh4E2PdI0S3r.L0    <- checksum
    _pat = re.compile(r"""
        ^
        \$
        (?P<ident>[PH])
        \$
        (?P<rounds>[A-Za-z0-9./])
        (?P<salt>[A-Za-z0-9./]{8})
        (?P<chk>[A-Za-z0-9./]{22})?
        $
        """, re.X)

    @classmethod
    def from_string(cls, hash):
        if not hash:
            raise ValueError, "no hash specified"
        m = cls._pat.match(hash)
        if not m:
            raise ValueError, "invalid phpass portable hash"
        ident, rounds, salt, chk = m.group("ident", "rounds", "salt", "chk")
        return cls(
            ident=ident,
            rounds=h64.decode_6bit(rounds),
            salt=salt,
            checksum=chk,
            strict=bool(chk),
        )

    def to_string(self):
        return "$%s$%s%s%s" % (self.ident, h64.encode_6bit(self.rounds), self.salt, self.checksum or '')

    #=========================================================
    #backend
    #=========================================================
    def calc_checksum(self, secret):
        #FIXME: can't find definitive policy on how phpass handles non-ascii.
        if isinstance(secret, unicode):
            secret = secret.encode("utf-8")
        real_rounds = 1<<self.rounds
        result = md5(self.salt + secret).digest()
        r = 0
        while r < real_rounds:
            result = md5(result + secret).digest()
            r += 1
        return h64.encode_bytes(result)

    #=========================================================
    #eoc
    #=========================================================

#=========================================================
#drupal 7 descendant of phpass...
#=========================================================

#other hashes drupal7 tables can have: drupal7 (below), phpass (P & H),
# and (possibly md5 - hex or other?) - upgraded flag for drupal7 seems to imply something of that type.
# it looks like we also need U$P$ support as well.

class drupal7_upgraded_phpass(phpass):
    "variant of PHPass found in Drupal7, known as an 'upgraded' phpass hash, since the hash is actually of an existing MD5 digest of the password"
    name = "drupal7_upgraded_phpass"

    @classmethod
    def identify(cls, hash):
        return bool(hash) and (hash.startswith("U$P$") or hash.startswith("U$H$"))

    _pat = re.compile(r"""
        ^
        U\$
        (?P<ident>[PH])
        \$
        (?P<rounds>[A-Za-z0-9./])
        (?P<salt>[A-Za-z0-9./]{8})
        (?P<chk>[A-Za-z0-9./]{22})?
        $
        """, re.X)

    def to_string(self):
        return "U" + super(drupal7_upgraded_phpass,self).to_string()

    def calc_checksum(self, secret):
        #FIXME: can't find definitive policy on how phpass handles non-ascii.
        if isinstance(secret, unicode):
            secret = secret.encode("utf-8")
        secret = md5(secret).hexdigest()
        return super(drupal7_upgraded_phpass,self).calc_checksum(secret)

class drupal7_sha512_phpass(ExtendedHandler):
    "Descendant of PHPass Portable Hash used by Drupal 7. Main different is replacement of MD5 with SHA512, and truncation of hash to 55 chars"
    name = "drupal7_sha512_phpass"
    setting_kwds = ("salt", "rounds")

    min_salt_chars = max_salt_chars = 8

    min_rounds = 7
    max_rounds = 30
    default_rounds = 14
    rounds_cost = "log2"

    @classmethod
    def identify(cls, hash):
        return bool(hash) and hash.startswith("$S$")

    # $S$ {rounds:single h64 char} {salt:6 h64 chars}
    _pat = re.compile(r"""
        ^
        \$S\$
        (?P<rounds>[A-Za-z0-9./])
        (?P<salt>[A-Za-z0-9./]{8})
        (?P<chk>[A-Za-z0-9./]{43})?
        $
        """, re.X)

    @classmethod
    def from_string(cls, hash):
        if not hash:
            raise ValueError, "no hash specified"
        m = cls._pat.match(hash)
        if not m:
            raise ValueError, "invalid phpass portable hash"
        rounds, salt, chk = m.group("rounds", "salt", "chk")
        return cls(
            rounds=h64.decode_6bit(rounds),
            salt=salt,
            checksum=chk,
            strict=bool(chk),
        )

    def to_string(self):
        return "$S$%s%s%s" % (h64.encode_6bit(self.rounds), self.salt, self.checksum or '')

    #=========================================================
    #backend
    #=========================================================
    def calc_checksum(self, secret):
        #FIXME: can't find definitive policy on how drupal7 handles non-ascii.
        if isinstance(secret, unicode):
            secret = secret.encode("utf-8")
        real_rounds = 1<<self.rounds
        result = sha512(self.salt + secret).digest()
        r = 0
        while r < real_rounds:
            result = sha512(result + secret).digest()
            r += 1
        #drupal limits total size to 55 chars, so given 12 char prefix,
        #sha512 is truncated. this leaves only 256 bits worth of checksum.
        #md5 will be left alone, resulting in valid PHPass hashes.
        return h64.encode_bytes(result)[:55-12]

    #=========================================================
    #eoc
    #=========================================================

class drupal7_upgraded_sha512_phpass(drupal7_sha512_phpass):
    "variant of Drupal7-SHA512-PHPass found in Drupal7, known as an 'upgraded' hash, since the hash is actually of an existing MD5 digest of the password"
    name = "drupal7_upgraded_sha512_phpass"

    setting_kwds = ("salt")

    @classmethod
    def identify(cls, hash):
        return bool(hash) and hash.startswith("U$S$")

    _pat = re.compile(r"""
        ^
        U\$S\$
        (?P<rounds>[A-Za-z0-9./])
        (?P<salt>[A-Za-z0-9./]{8})
        (?P<chk>[A-Za-z0-9./]{22})?
        $
        """, re.X)

    def to_string(self):
        return "U" + super(drupal7_upgraded_sha512_phpass,self).to_string()

    def calc_checksum(self, secret):
        #FIXME: can't find definitive policy on how phpass handles non-ascii.
        if isinstance(secret, unicode):
            secret = secret.encode("utf-8")
        secret = md5(secret).hexdigest()
        return super(drupal7_upgraded_sha512_phpass,self).calc_checksum(secret)

#=========================================================
#eof
#=========================================================
